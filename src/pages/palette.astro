---
import Layout from "../layouts/Layout.astro";

import Link from "../components/Link.astro";
import PageIntro from "../components/PageIntro.astro";
import PhosphorIcon from "../components/PhosphorIcon.astro";
import FlavorName from "../components/FlavorName.astro";

import { CatppuccinLinks as links } from "../contents/CatppuccinLinks";

import { flavorEntries } from "@catppuccin/palette";
---

<Layout title="Palette â€¢ Catppuccin" description="All the ins and outs of our lovely palette">
  <PageIntro title="Palette">
    <p>
      Catppuccin consists of 4 beautiful pastel color palettes ("flavors"). We offer three dark themes; <FlavorName
        flavor="mocha"
      /> and <FlavorName flavor="macchiato" />, both offering a cozy feeling with color-rich accents, and <FlavorName
        flavor="frappe"
      /> as a less vibrant alternative. We also have a light theme, <FlavorName flavor="latte" />, which is a bright and
      shining counterpart to the essence of our dark themes.
    </p>
    <p>
      If you'd like to use them for your own project you can refer to our <Link
        href=`${links.github}/catppuccin/blob/main/docs/style-guide.md`
        `
        external>style guide</Link
      > for general use cases and guidelines. Additionally, you can find integrations with popular frameworks and tools in
      <Link href=`${links.github}/palette` ` external>catppuccin/palette</Link>.
    </p>
  </PageIntro>

  <section class="flavor-grid">
    {
      flavorEntries.map(([flavorName, flavor]) => (
        <div class="flavor">
          <details open>
            <summary>
              <h2 id={`flavor-${flavorName}`} class="flavor-name">
                <FlavorName flavor={flavorName} bold={false} />
              </h2>
            </summary>
            <table class="color-list" cellspacing="0">
              <tr class="color-list-header">
                <th>Color</th>
                <th>Hex</th>
                <th>RGB</th>
                <th>HSL</th>
              </tr>
              {Object.values(flavor.colors).map(({ hex, rgb, hsl, name }) => (
                <tr class="color-list-entry" style={`--current-color: ${hex}`}>
                  <td class="color">
                    <h5 class="color-name">{name}</h5>
                  </td>
                  <td class="color-hex">
                    {/* prettier-ignore */}
                    <button class="btn btn-small btn-transparent js-copy" data-value={hex.replace("#", "")}><PhosphorIcon icon="copy" size={12} /> {hex.replace("#", "").toUpperCase()}</button>
                  </td>
                  <td class="color-rgb">
                    {/* prettier-ignore */}
                    <button class="btn btn-small btn-transparent js-copy" data-value={`${rgb.r} ${rgb.g} ${rgb.b}`}><PhosphorIcon icon="copy" size={12} /> {`${rgb.r}`.padStart(3)}, {`${rgb.g}`.padStart(3)}, {`${rgb.b}`.padStart(3)}</button>
                  </td>
                  <td class="color-hsl">
                    {/* prettier-ignore */}
                    <button class="btn btn-small btn-transparent js-copy" data-value={`${Math.floor(hsl.h)}, ${Math.floor(hsl.s * 100)}, ${Math.floor(hsl.l * 100)}`}><PhosphorIcon icon="copy" size={12} /> {`${Math.floor(hsl.h)}`.padStart(3)}, {`${Math.floor(hsl.s * 100)}`.padStart(3)}, {`${Math.floor(hsl.l * 100)}`.padStart(3)} </button>
                  </td>
                </tr>
              ))}
            </table>
          </details>
        </div>
      ))
    }
  </section>
</Layout>

<script is:inline>
  const elements = document.querySelectorAll(".js-copy");
  elements.forEach((element) =>
    element.addEventListener("click", () => {
      navigator.clipboard.writeText(element.dataset.value);

      element.classList.add("copy-success");
      return setTimeout(() => element.classList.remove("copy-success"), 1500);
    }),
  );
</script>

<style lang="scss">
  @use "../styles/utils";

  :root {
    --accent-color: var(--mauve);
  }

  @keyframes copyFadeOut {
    to {
      color: inherit;
    }
  }

  .flavor {
    @include utils.containerPadding();
    margin-block-start: var(--space-md);

    border-radius: var(--border-radius-normal);
    background: var(--mantle);

    overflow-x: scroll;
  }

  .flavor-name,
  .color-name {
    text-transform: capitalize;
  }

  .flavor-name {
    font-size: inherit;
  }

  .color-list {
    margin-block-start: var(--space-md);
    margin-inline: auto;
  }

  .color-list-entry {
    --__current-color: var(--current-color, var(--text));
  }

  .color-name {
    position: relative;

    margin: 0;
    padding: 0;
    padding-inline-start: 3rem;

    &::before {
      content: "";

      position: absolute;
      left: 0;

      height: 2rem;
      aspect-ratio: 1 / 1;

      border-radius: 9999px;
      border: 1px solid color-mix(in srgb, var(--mantle), var(--surface0) 50%);
      background-color: var(--__current-color);
    }
  }

  .color-hex,
  .color-rgb,
  .color-hsl {
    .btn {
      font-size: 80%;
      font-family: monospace;
      white-space: pre;
    }
  }

  .copy-success {
    color: var(--green);

    animation: copyFadeOut 500ms forwards;
    animation-delay: 750ms;
  }
</style>
