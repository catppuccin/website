---
import Layout from "../layouts/Layout.astro";

import Link from "../components/Link.astro";
import PageIntro from "../components/PageIntro.astro";
import { Icon } from "astro-icon/components";
import FlavorName from "../components/FlavorName.astro";

import { links } from "../contents/links";

import { flavorEntries } from "@catppuccin/palette";
import { toRgb, toHsl } from "../lib/colorFormat";
---

<Layout
  title="Palette • Catppuccin"
  description="Dive into Catppuccin's palette: four unique pastel color palettes named 'flavors'. Ideal for your next project!">
  <PageIntro title="Palette">
    <p>
      Catppuccin consists of 4 beautiful pastel color palettes, named <strong>flavors</strong>. The theme comes in one
      light and three dark variants:
      <ul>
        <li>
          <FlavorName flavor="latte" />: Our lightest theme harmoniously inverting the essence of Catppuccin's dark
          themes.
        </li>
        <li>
          <FlavorName flavor="frappe" />: A less vibrant alternative using subdued colors for a muted aesthetic.
        </li>
        <li>
          <FlavorName flavor="macchiato" />: Medium contrast with gentle colors creating a soothing atmosphere.
        </li>
        <li>
          <FlavorName flavor="mocha" />: The Original — Our darkest variant offering a cozy feeling with color-rich
          accents.
        </li>
      </ul>
      <p>
        If you'd like to use them for your own project, refer to our
        <Link href=`${links.github}/catppuccin/blob/main/docs/style-guide.md` external>style guide</Link>
        for general use cases and guidelines. Additionally, you can find integrations with popular frameworks and tools in
        <Link href=`${links.github}/palette` external>catppuccin/palette</Link>.
      </p>
    </p>

    <section class="flavor-grid">
      {
        flavorEntries.map(([flavorName, flavor]) => (
          <div class="flavor">
            <details open>
              <summary>
                <h2 id={`flavor-${flavorName}`} class="flavor-name">
                  <FlavorName flavor={flavorName} bold={false} />
                </h2>
              </summary>
              <table class="color-list" cellspacing="0">
                <thead>
                  <tr class="color-list-header">
                    <th>Color</th>
                    <th>Hex</th>
                    <th>RGB</th>
                    <th>HSL</th>
                  </tr>
                </thead>
                <tbody>
                  {Object.values(flavor.colors).map(({ hex, rgb, hsl, name }) => (
                    <tr class="color-list-entry" style={`--current-color: ${hex}`}>
                      <td class="color">
                        <h5 class="color-name">{name}</h5>
                      </td>
                      <td class="color-hex">
                        <button class="btn btn-small btn-transparent">
                          <Icon name="ph:copy-fill" size={12} />
                          <span class="color-value">{hex}</span>
                        </button>
                      </td>
                      <td class="color-rgb">
                        <button class="btn btn-small btn-transparent">
                          <Icon name="ph:copy-fill" size={12} />
                          <span class="color-value">{toRgb(rgb)}</span>
                        </button>
                      </td>
                      <td class="color-hsl">
                        <button class="btn btn-small btn-transparent">
                          <Icon name="ph:copy-fill" size={12} />
                          <span class="color-value">{toHsl(hsl)}</span>
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </details>
          </div>
        ))
      }
    </section>
  </PageIntro>

  <script is:inline>
    const elements = document.querySelectorAll(".color-list-entry button");
    elements.forEach((element) =>
      element.addEventListener("click", () => {
        navigator.clipboard.writeText(element.querySelector(".color-value").textContent);

        element.classList.add("copy-success");

        return setTimeout(() => {
          element.classList.remove("copy-success");
        }, 1500);
      }),
    );
  </script>

  <style lang="scss">
    @use "../styles/utils";

    :root {
      --accent-color: var(--mauve);
    }

    summary {
      cursor: pointer;
    }

    .flavor {
      @include utils.containerPadding();
      margin-block-start: var(--space-md);

      border-radius: var(--border-radius-normal);
      background: var(--mantle);

      overflow-x: auto;
    }

    .flavor-name,
    .color-name {
      text-transform: capitalize;
    }

    .flavor-name {
      font-size: inherit;
    }

    .color-list {
      margin-block-start: var(--space-md);
      margin-inline: auto;
    }

    .color-list-entry {
      --__current-color: var(--current-color, var(--text));
    }

    .color-name {
      position: relative;

      margin: 0;
      padding: 0;
      padding-inline-start: 3rem;

      &::before {
        content: "";

        position: absolute;
        left: 0;

        height: 2rem;
        aspect-ratio: 1 / 1;

        border-radius: 9999px;
        border: 1px solid color-mix(in srgb, var(--mantle), var(--surface0) 50%);
        background-color: var(--__current-color);
      }
    }

    .color-hex,
    .color-rgb,
    .color-hsl {
      .btn {
        font-size: 80%;
        font-family: monospace;
        white-space: pre;
      }
    }

    .copy-success {
      color: var(--green);
    }
  </style>
</Layout>
