---
import { Icon } from "astro-icon/components";
import { render, type CollectionEntry } from "astro:content";
import { Picture } from "astro:assets";

import Pill from "@components/Pills.svelte";
import ProfilePicture from "@components/ProfilePicture.svelte";
import { fade } from "astro:transitions";

interface Props {
  post: CollectionEntry<"blog">;
}

const { post } = Astro.props;
const { remarkPluginFrontmatter } = await render(post);

const formattedDatePosted = new Date(post.data.datePosted).toLocaleDateString("en-US", {
  year: "numeric",
  month: "long",
  day: "numeric",
});
---

<a href={`/blog/${post.id}`}>
  <article class="post-card">
    <figure
      class="blog-hero-image"
      transition:name=`${post.data.title}${post.data.featured}`
      transition:animate={fade({ duration: "0.4s" })}>
      <Picture
        src={post.data.hero.image}
        alt={post.data.hero.alt}
        formats={["avif", "webp"]}
        widths={[800, 1600, post.data.hero.image.width]}
        sizes={`(max-width: 720px) 800px, (max-width: 1080px) 1600px, ${post.data.hero.image.width}px`}
      />
    </figure>
    <div class="post-content">
      <header class="article-header">
        <h3>{post.data.title}</h3>
      </header>
      <main class="article-content">
        <p>{post.data.summary}</p>
      </main>
      <footer class="article-footer">
        <Pill list={[post.data.category]} />
        <div class="article-meta">
          <div class="article-author">
            {post.data.authors.map((author) => <ProfilePicture username={author.github} size={64} wxh={24} />)}
          </div>
          <p class="article-pubdate has-icon">
            <Icon name="ph:calendar-dots-fill" size={24} />
            {formattedDatePosted}
          </p>
          <p class="article-readingtime has-icon">
            <Icon name="ph:clock" size={24} />
            {remarkPluginFrontmatter.minutesRead}
          </p>
        </div>
      </footer>
    </div>
  </article>
</a>

<style lang="scss">
  @use "@styles/utils";

  a {
    &:hover,
    &:focus {
      text-decoration: none;
    }

    &:has(h3):hover,
    &:has(h3):focus {
      h3 {
        text-decoration: underline;
      }
    }

    &:has(.post-card) h3 {
      color: unset;
      margin: 0;
      padding: 0;
    }
  }

  .post-card {
    display: flex;
    flex-direction: column;
    border-radius: var(--border-radius-normal);
    background-color: var(--mantle);
    overflow: clip;
    height: 100%;

    transition: all 300ms ease-in-out;

    &:hover {
      transform: scale(102%);

      background-position: top right;

      @media (prefers-reduced-motion) {
        transform: none;
      }
    }

    figure {
      max-width: 100%;
      aspect-ratio: 16 / 5;
      margin: 0;
      overflow: clip;

      :global(.blog-hero-image picture, .blog-hero-image img) {
        width: 100%;
        max-width: 100%;
        height: 100%;
        max-height: 100%;
        aspect-ratio: 16 / 5;
        object-fit: cover;
      }
    }

    a h3,
    p {
      margin: 0;
      padding: 0;
    }

    .post-content {
      @include utils.flex($direction: column, $gap: var(--space-sm));
      @include utils.containerPadding(sm);
      height: 100%;
    }

    .article-content {
      color: var(--subtext0);
    }

    .article-meta {
      @include utils.flex($direction: row, $gap: var(--space-xs) var(--space-sm));
      font-size: 80%;
    }

    .article-footer {
      margin-block-start: auto;
    }

    .article-category {
      color: var(--article-category-color);
    }

    .article-meta {
      margin-block-start: var(--space-sm);
      color: var(--overlay1);
    }

    .has-icon {
      @include utils.flex($direction: row, $gap: var(--space-xs));
      margin: 0;
      padding: 0;
    }
  }
</style>
